// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "Subsystems/DriveTrain.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "Commands/JoyDrive.h"
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

DriveTrain::DriveTrain() : frc::Subsystem("DriveTrain") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    frontRight.reset(new frc::Spark(0));
    AddChild("frontRight", std::static_pointer_cast<frc::Spark>(frontRight));
    
    backRight.reset(new frc::Spark(1));
    AddChild("backRight", std::static_pointer_cast<frc::Spark>(backRight));
    
    speedControllerGroup1 = std::make_shared<frc::SpeedControllerGroup>(*frontRight, *backRight  );
    AddChild("Speed Controller Group 1", speedControllerGroup1);
    
    frontLeft.reset(new frc::Spark(2));
    AddChild("frontLeft", std::static_pointer_cast<frc::Spark>(frontLeft));
    
    backLeft.reset(new frc::Spark(3));
    AddChild("backLeft", std::static_pointer_cast<frc::Spark>(backLeft));
    
    speedControllerGroup2 = std::make_shared<frc::SpeedControllerGroup>(*frontLeft, *backLeft  );
    AddChild("Speed Controller Group 2", speedControllerGroup2);
    
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    spoolOne.reset(new rev::SparkMax(4));
    AddChild("spoolOne", std::static_pointer_cast<rev::SparkMax>(spoolOne));

    spoolTwo.reset(new rev::SparkMax(5));
    AddChild("spoolTwo", std::static_pointer_cast<rev::SparkMax>(spoolTwo));

    spoolThree.reset(new rev::SparkMax(6));
    AddChild("spoolThree", std::static_pointer_cast<rev::SparkMax>(spoolThree));

    myEx.reset(new frc::Spark(7));
    AddChild("myEx", std::static_pointer_cast<frc::Spark>(myEx));

    drive_x = 0;
    drive_y = 0;
}

void DriveTrain::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        SetDefaultCommand(new JoyDrive());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}

void DriveTrain::Periodic() {
    // Put code here to be run every loop

}

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

void DriveTrain::DiffDrive(std::shared_ptr<frc::Joystick> stick)
{
    drive_x = stick->GetX();
    drive_y = stick->GetY();
    speedControllerGroup1->Set((1/(1+exp(-7*(drive_x+0.5)))) + (1/(1+exp(-7*(drive_x-0.5))) - 1) + ((1/(1+exp(-7*(drive_y+0.5)))) + (1/(1+exp(-7*(drive_y-0.5)))) - 1));
    speedControllerGroup2->Set((1/(1+exp(-7*(drive_x+0.5)))) + (1/(1+exp(-7*(drive_x-0.5))) - 1) + ((1/(1+exp(-7*(-drive_y+0.5)))) + (1/(1+exp(-7*(-drive_y-0.5)))) - 1));
}
// Put methods for controlling this subsystem
// here. Call these from Commands.

void DriveTrain::DriveAuto()
{
    speedControllerGroup1->Set(.5);
    speedControllerGroup2->Set(-.5);
}

void DriveTrain::DeployHook()
{
    spoolOne->Set(0.25);
}

void DriveTrain::RetractHook()
{
    spoolOne->Set(-0.25);
}

void DriveTrain::StopHook()
{
    spoolOne->Set(0);
}

void DriveTrain::StopClimb()
{
    spoolTwo->Set(0);
    spoolThree->Set(0);
}

void DriveTrain::Climber()
{
    spoolTwo->Set(-.75);
    spoolThree->Set(.75);
}

void DriveTrain::UnClimb()
{
    spoolTwo->Set(.75);
    spoolThree->Set(-0.75);
}

void DriveTrain::Stop()
{
    speedControllerGroup1->Set(0);
    speedControllerGroup2->Set(0);
}

void DriveTrain::Dump()
{
    myEx->Set(.45);
}

void DriveTrain::Undump()
{
    myEx->Set(-0.45);
}

void DriveTrain::StopDump()
{
    myEx->Set(0);
}